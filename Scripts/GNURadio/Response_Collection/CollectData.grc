options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: CollectData
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: card
  id: variable
  parameters:
    comment: ''
    value: '52'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 16.0]
    rotation: 0
    state: enabled
- name: center_frequency
  id: variable
  parameters:
    comment: ''
    value: 13.5e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 16.0]
    rotation: 0
    state: enabled
- name: rx_fs
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 16.0]
    rotation: 0
    state: enabled
- name: tx_fs
  id: variable
  parameters:
    comment: ''
    value: 12.5e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 16.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\akamrath2\Documents\Research_Summer2024\DataCollection\GNURadio\Data\rx_data.dat
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 344.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nThis block will take in the input parameters and generate\
      \ the sampled data\nfor the corresponding command. It will then add a RF Reset\
      \ (just an array of 0's)\nafter the command portion is outputted.\n\nInputs:\n\
      \nTx_fs: Transmit Frequency for the data generated\nAsk_percent: Multiplication\
      \ factor used to Amplitude Shift Keying (between 0.1 and 1.0)\nCommand_code:\
      \ Hex Value used for the command generated according to ISO15693 Documentation\n\
      Mask_Length: Mask Length used for Inventory command\nflagBits: 8 binary values\
      \ used for command flag bits according to ISO15693 Documentation, this\n   \
      \         is updated automatically by the 'save card signals' block.\n\nOutputs:\n\
      \nout_sig: Samples for command transmission\ntx_len: length of the sampled command\
      \ array. Used when saving tag signals after reception\n\"\"\"\n\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport pmt\nimport logging\n\nlogger = logging.getLogger('grc')\n\
      logging.basicConfig(level=logging.DEBUG)\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ tx_fs=12.5e6, ask_percent=1.0, commandCode=0b00000001, maskLength=0b00000000):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Generate Command Data',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[np.complex64]\n        )\n   \
      \     # Variables that persist over multiple work calls\n        self.tx_fs\
      \ = tx_fs\n        self.ask_percent = ask_percent\n        self.flagBits = '00100100'\n\
      \        self.commandCode = commandCode\n        self.maskLength = maskLength\n\
      \        self.data_generated = False\n        self.command_data = None\n   \
      \     self.command_data_len = 0\n        self.current_index = 0\n\n        #Tx_len\
      \ output and flagBits input setup\n        self.message_port_register_out(pmt.intern(\"\
      tx_len\"))\n        self.message_port_register_in(pmt.intern(\"flagBits\"))\n\
      \        self.set_msg_handler(pmt.intern(\"flagBits\"), self.handle_msg)\n\n\
      \    def work(self, input_items, output_items):\n        \n        ## Generate\
      \ Data if it has not already been\n        if not self.data_generated:\n   \
      \         logger.debug(\"Flagbits: \" + self.flagBits)\n            flagBits\
      \ = int(self.flagBits,2) # Convert flagBits string to int\n            self.command_data\
      \ = generateCommandData(self.tx_fs, self.ask_percent, flagBits, self.commandCode,\
      \ self.maskLength) # Generate command data\n            self.command_data_len\
      \ = len(self.command_data)\n            self.message_port_pub(pmt.intern(\"\
      tx_len\"), pmt.from_long(self.command_data_len)) # Change the tx_len output\
      \ to correspond with new data\n            self.data_generated = True\n    \
      \        logger.debug(\"DATA GENERATED\")\n        \n        num_output_items\
      \ = len(output_items[0])\n        end_index = self.current_index + num_output_items\n\
      \        \n        ## Setting output items. Can only output 4096 items per work\
      \ call. This keeps track of the index of the array to ensure we are outputting\
      \ the correct data\n        try:\n            if end_index <= self.command_data_len:\n\
      \                output_items[0][:] = self.command_data[self.current_index:end_index]\n\
      \                self.current_index = end_index\n            else:\n       \
      \         remaining_items = self.command_data_len - self.current_index\n   \
      \             output_items[0][:remaining_items] = self.command_data[self.current_index:self.command_data_len]\n\
      \                output_items[0][remaining_items:] = self.command_data[:num_output_items\
      \ - remaining_items]\n                self.current_index = num_output_items\
      \ - remaining_items\n        except:\n            self.data_generated = False\n\
      \            self.command_data_len = 0\n            self.current_index = 0\n\
      \            remaining_items = 0\n            output_items[0][:] = 0\n     \
      \       return 0\n        return len(output_items[0])\n\n\n    #Get flagBits\
      \ from generate command data block\n    def handle_msg(self, msg):\n       \
      \ prevFlagBits = self.flagBits\n        if prevFlagBits != str(msg):\n     \
      \       logger.debug(\"CHANGING FLAGBITS\")\n            self.flagBits = str(msg)\n\
      \            self.data_generated = False\n\n#Takes in the input parameters and\
      \ creates an array with the neccessary command data\ndef generateCommandData(tx_fs,\
      \ ask_percent, flagBits, commandCode, maskLength):\n\n    rf_reset_length =\
      \ round((8160e-6)/(1/tx_fs))\n    data_bytes = [flagBits, commandCode, maskLength]\n\
      \    CRC = calculateCRC(data_bytes)\n\n    ## Rearrange Bits for Transmission\n\
      \    flagBits = bin(flagBits)[2:].zfill(8)\n    commandCode = bin(commandCode)[2:].zfill(8)\n\
      \    maskLength = bin(maskLength)[2:].zfill(8)\n\n    rearranged_flagBits =\
      \ ''\n    for i in range(len(flagBits) - 1, 0, -2):\n        bitpair = flagBits[i-1:i+1]\n\
      \        rearranged_flagBits = rearranged_flagBits + bitpair\n\n    rearranged_commandCode\
      \ = ''\n    for i in range(len(commandCode) - 1, 0, -2):\n        bitpair =\
      \ commandCode[i-1:i+1]\n        rearranged_commandCode = rearranged_commandCode\
      \ + bitpair\n\n    rearranged_maskLength = ''\n    for i in range(len(maskLength)\
      \ - 1, 0, -2):\n        bitpair = maskLength[i-1:i+1]\n        rearranged_maskLength\
      \ = rearranged_maskLength + bitpair\n\n    rearranged_CRC = ''\n    for i in\
      \ range(len(CRC) - 1, 0, -2):\n        bitpair = CRC[i-1:i+1]\n        rearranged_CRC\
      \ = rearranged_CRC + bitpair\n\n    # Get the correct binary code for the command\n\
      \    command = rearranged_flagBits + rearranged_commandCode + rearranged_maskLength\
      \ + rearranged_CRC\n    \n    #Modulates the data\n    command_data = modulateCommand(command,\
      \ tx_fs, ask_percent)\n    command_data = modulateSOF_EOF(command_data, tx_fs,\
      \ ask_percent)\n    command_data = modulateSlotData(command_data, tx_fs, ask_percent,\
      \ flagBits)\n    \n    #Add RF Reset after the command data\n    command_data\
      \ = np.append(command_data, np.zeros(rf_reset_length,))\n    \n    # Embedded\
      \ the command into a sine wave for ASK Modulation\n    command_data = addSineWave(command_data,\
      \ tx_fs, 60000)\n    return command_data\n\n# Gets the hex values for the CRC\
      \ put at the end of the command. This changes everytime any command binary value\
      \ is changed\ndef calculateCRC(data_bytes):\n    # Constants\n    POLYNOMIAL\
      \ = 0x8408  # x^16 + x^12 + x^5 + 1\n    PRESET_VALUE = 0xFFFF\n    NUMBER_OF_BYTES\
      \ = len(data_bytes)\n    \n    current_crc_value = PRESET_VALUE\n    \n    for\
      \ i in range(NUMBER_OF_BYTES):\n        current_crc_value = current_crc_value\
      \ ^ (data_bytes[i])\n        for j in range(8):\n            if (current_crc_value\
      \ & 0x0001):\n                current_crc_value = (current_crc_value >> 1) ^\
      \ POLYNOMIAL\n            else:\n                current_crc_value = current_crc_value\
      \ >> 1\n\n    inverted_crc_value = ~current_crc_value\n    unsigned_integer\
      \ = inverted_crc_value+(1 << 16) \n    CRC = bin(unsigned_integer)[2:].zfill(16)\n\
      \n    return CRC\n\n# Using the hex values for the binary command, gets an array\
      \ of 1's and 0's according to ISO15693 documentation        \ndef modulateCommand(command,\
      \ tx_fs, ask_percent):\n    \n    pair_samples = round((75.52e-6)/(1/tx_fs))\n\
      \    low_percent = 1 - ask_percent\n    low_samples = round((9.44e-06)/(1/tx_fs))\n\
      \    low_data = np.ones(low_samples) * low_percent\n    \n    data = []\n  \
      \  for i in range(0, len(command), 2):\n        pair = command[i:i+2]\n    \
      \    pair_data = np.ones(pair_samples)\n        match pair:\n            case\
      \ \"00\":\n                high_samples = round((9.44e-06)/(1/tx_fs))\n    \
      \            pair_data[high_samples:high_samples+low_samples] = low_data\n \
      \           case \"01\":\n                high_samples = round((28.32e-06)/(1/tx_fs))\n\
      \                pair_data[high_samples:high_samples+low_samples] = low_data\n\
      \            case \"10\":\n                high_samples = round((47.2e-06)/(1/tx_fs))\n\
      \                pair_data[high_samples:high_samples+low_samples] = low_data\n\
      \            case \"11\":\n                high_samples = round((66.08e-06)/(1/tx_fs))\n\
      \                pair_data[high_samples:high_samples+low_samples] = low_data\n\
      \        data = np.append(data, pair_data)\n    return data\n\n# Gets array\
      \ of 1's and 0's for Start of Frame and End of Frame\ndef modulateSOF_EOF(data,\
      \ tx_fs, ask_percent):\n    SOF_length = round((75.52e-06)/(1/tx_fs))\n    EOF_length\
      \ = round(SOF_length/2)\n    \n    low_percent = 1-ask_percent\n    low_samples\
      \ = round((9.44e-06)/(1/tx_fs))\n    low_data = np.ones(low_samples) * low_percent\n\
      \n    SOF = np.ones(SOF_length)\n    SOF[:low_samples] = low_data\n    high_samples\
      \ = round((47.2e-06)/(1/tx_fs))\n    SOF[high_samples:high_samples+low_samples]\
      \ = low_data\n\n    EOF = np.ones(EOF_length)\n    high_samples = round((18.88e-06)/(1/tx_fs))\n\
      \    EOF[high_samples:high_samples + low_samples] = low_data\n\n    data = np.append(SOF,\
      \ data)\n    data = np.append(data, EOF)\n    return data\n\n# Adds slots to\
      \ data according to flagBits\ndef modulateSlotData(data, tx_fs, ask_percent,\
      \ flagBits):\n    slot_flag = flagBits[2]\n    rate_flag = flagBits[6]\n   \
      \ inv_flag = flagBits[5]\n    \n    low_percent = 1-ask_percent\n    low_samples\
      \ = round((9.44e-06)/(1/tx_fs))\n    low_data = np.ones(low_samples) * low_percent\n\
      \n    EOF_length = round((37.76e-06)/(1/tx_fs))\n    EOF = np.ones(EOF_length)\n\
      \    high_samples = round((18.88e-06)/(1/tx_fs))\n    EOF[high_samples:high_samples\
      \ + low_samples] = low_data\n\n    if (rate_flag == '1'):\n        slot_length\
      \ = round(8160e-06/(1/tx_fs))\n    else:\n        slot_length = round(20332e-06/(1/tx_fs))\n\
      \    slot = np.ones(slot_length)\n    data = np.append(slot, data)\n    if (slot_flag\
      \ == '0' and inv_flag == '1'):\n        slot = np.append(slot,EOF)\n       \
      \ for i in range(16):\n            data = np.append(data, slot)\n    else:\n\
      \        data = np.append(data, np.ones(slot_length))\n    return data\n\n#\
      \ Adds ASK Modulation to data\ndef addSineWave(data, tx_fs, sinewave_fs):\n\
      \    data_length = len(data)\n    duration = data_length / tx_fs\n    t = np.linspace(0,\
      \ duration, data_length, endpoint=False, dtype=np.complex64)  # Time array\n\
      \n    # Generate the complex sine wave\n    sine_wave = np.exp(2j * np.pi *\
      \ sinewave_fs * t).astype(np.complex64)\n    data = sine_wave * data\n    return\
      \ data"
    affinity: ''
    alias: ''
    ask_percent: '1.0'
    commandCode: '0x01'
    comment: ''
    maskLength: '0b00000000'
    maxoutbuf: '0'
    minoutbuf: '0'
    tx_fs: tx_fs
  states:
    _io_cache: ('Generate Command Data', 'blk', [('tx_fs', '12500000.0'), ('ask_percent',
      '1.0'), ('commandCode', '1'), ('maskLength', '0')], [('flagBits', 'message',
      1)], [('0', 'complex', 1), ('tx_len', 'message', 1)], 'Embedded Python Block
      example - a simple multiply const', ['ask_percent', 'commandCode', 'maskLength',
      'tx_fs'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 256.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nThis block will fill a buffer and then search the buffer\
      \ for tag signals.\nThis will continue until the neccessary amount of card signals\
      \ is found.\nThen is will change the flagBits for command generate and start\
      \ again.\n\nInputs:\n\nRx_fs: Receiving frequency used to know the timing of\
      \ the received signal\nTx_fs: Transmit frequency used to know the timing of\
      \ the transmitted signal\nsignals_requested: How many signals to find and stop\
      \ after (for each response combination)\nCard: The card used to save data from\n\
      \nOutputs:\n\nflagBits: used to change what command is being transmitted. Connected\
      \ to generate command data block\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\nimport logging\nimport os\nfrom pathlib import Path\n\
      from scipy.stats.stats import pearsonr \n\nlogger = logging.getLogger('grc')\n\
      logging.basicConfig(level=logging.DEBUG)\n\nclass SaveNumpyArrayBlock(gr.sync_block):\n\
      \    def __init__(self, rx_fs=2e6, tx_fs=12.5e6, signals_requested = 100, card\
      \ = 1):\n        gr.sync_block.__init__(\n            self,\n            name='Save\
      \ Card Signals',\n            in_sig=[np.complex64],\n            out_sig=[]\n\
      \        )\n        ## Make Variables that persistent with each work loop\n\
      \        self.data = []\n        self.rx_fs = rx_fs\n        self.tx_fs = tx_fs\n\
      \        self.flagBits = ['00100100','00100101','00100110','00100111']\n   \
      \     self.signals_found = 0\n        self.signals_requested = signals_requested\n\
      \        self.tx_len = 0\n        self.card = card\n        self.flagBitsIndex\
      \ = 0\n        \n        #tx_len and flagbits setup\n        self.message_port_register_in(pmt.intern(\"\
      tx_len\"))\n        self.set_msg_handler(pmt.intern(\"tx_len\"), self.handle_msg)\n\
      \        self.message_port_register_out(pmt.intern(\"flagBits\"))\n        self.message_port_pub(pmt.intern(\"\
      flagBits\"), pmt.intern(self.flagBits[0]))        \n        \n    #Get tx_len\
      \ from generate command data block\n    def handle_msg(self, msg):\n       \
      \ self.tx_len = pmt.to_long(msg)\n\n    def work(self, input_items, output_items):\n\
      \        \n        while self.flagBitsIndex < 4:    \n            #Changing\
      \ variables based on Data rate and subcarrier number combination\n         \
      \   flagBits = self.flagBits[self.flagBitsIndex]\n            match flagBits[6:8]:\n\
      \                case '00':\n                    data_directory = Path('C:/Users/akamrath2/Documents/Research_Summer2024/DataCollection/GNURadio/Data/OneSubcarrierLowDataRate')\n\
      \                    SOF_time = (151.04e-06) * 4\n                    bit_time\
      \ = (37.76e-06) * 4\n                case '01':\n                    data_directory\
      \ = Path('C:/Users/akamrath2/Documents/Research_Summer2024/DataCollection/GNURadio/Data/TwoSubcarriersLowDataRate')\n\
      \                    SOF_time = (149.85e-06) * 4\n                    bit_time\
      \ = (37.46e-06) * 4\n                case '10':\n                    data_directory\
      \ = Path('C:/Users/akamrath2/Documents/Research_Summer2024/DataCollection/GNURadio/Data/OneSubcarrierHighDataRate')\n\
      \                    SOF_time = 151.04e-06\n                    bit_time = 37.76e-06\n\
      \                case '11':\n                    data_directory = Path('C:/Users/akamrath2/Documents/Research_Summer2024/DataCollection/GNURadio/Data/TwoSubcarriersHighDataRate')\n\
      \                    SOF_time = 149.85e-06\n                    bit_time = 37.46e-06\n\
      \n            # Define file paths\n            os.makedirs(data_directory, exist_ok=True)\n\
      \            card_name = 'card' + str(self.card) + '.npy'\n            self.card_sig_path\
      \ = data_directory / card_name\n            self.corr_sig_path = data_directory\
      \ / 'corr_signal.npy'\n\n            SOF_length = round(SOF_time/(1/self.rx_fs))\n\
      \            bit_length = round(bit_time/(1/self.rx_fs))\n            response_bits\
      \ = 8\n            response_length = SOF_length + (bit_length * (response_bits))\n\
      \n            #Create files if they don't exist\n            if not self.card_sig_path.is_file():\n\
      \                np.save(self.card_sig_path,  np.zeros((0,response_length),\
      \ dtype=np.complex64))\n\n            self.corr_signal = np.load(self.corr_sig_path,\
      \ allow_pickle=True)\n\n            # Collect incoming samples\n           \
      \ \n            # Runs when enough data is collected and stored\n          \
      \  if len(self.data) >= 2000000:\n                \n                prev_cards\
      \ = np.load(self.card_sig_path, allow_pickle=True)\n                self.signals_found\
      \ = prev_cards.shape[0]\n                buffer = np.array(self.data, dtype=np.complex64)\n\
      \                try:\n                    card_signals = findCardSignals(buffer,\
      \ self.rx_fs, self.tx_fs, flagBits, self.tx_len) # Finds all possible card signals\
      \ from collected data\n                    card_signals = normalize_data(self,\
      \ card_signals) # Makes sure they all have the same mean\n                except:\n\
      \                    self.data = []\n                    return 0\n        \
      \        ## Removes card signals that are not similar to the correlation signal\
      \ (a known card signal)\n                row_to_remove = []\n              \
      \  for i in range(card_signals.shape[0]):\n                    diff = pearsonr(np.abs(self.corr_signal),\
      \ np.abs(card_signals[i]))[0]\n                    if diff < 0.8:\n        \
      \                row_to_remove.append(i)\n                card_signals = np.delete(card_signals,\
      \ row_to_remove, axis=0)\n\n                ## Finds how signals we still need\
      \ to find\n                signals_remaining = self.signals_requested - self.signals_found\n\
      \                if signals_remaining > card_signals.shape[0]:\n           \
      \         signals_remaining = card_signals.shape[0]\n                \n    \
      \            ## Adds and saves newly found signals\n                card_signals\
      \ = np.vstack((prev_cards, card_signals[:signals_remaining]))\n            \
      \    self.signals_found = card_signals.shape[0]\n                logger.debug(\"\
      Signals Found: \" + str(self.signals_found))\n                np.save(self.card_sig_path,\
      \ card_signals)\n\n                ## Checks if all signals are found\n    \
      \            if self.signals_found >= self.signals_requested:\n            \
      \        card_signals = normalize_data(self, card_signals)\n               \
      \     np.save(self.card_sig_path, card_signals)\n                    logger.debug(\"\
      -------FLAGBITS: \" + str(self.flagBits[self.flagBitsIndex]) + \" COMPLETED-------\"\
      )\n                    self.flagBitsIndex = self.flagBitsIndex + 1\n       \
      \             self.message_port_pub(pmt.intern(\"flagBits\"), pmt.intern(self.flagBits[self.flagBitsIndex]))\n\
      \                    self.data = []\n                else:\n               \
      \     self.data = []\n                return 0\n            ## Collects data\n\
      \            elif len(self.data) <= 2000000:\n                self.data.extend(input_items[0])\n\
      \                return len(input_items[0])\n            return 0\n        return\
      \ 0\n            \ndef findCardSignals(data,rx_fs, tx_fs, flagBits, tx_len):\n\
      \    abs_data = np.abs(data)\n\n    ## Gets the correct timings of received\
      \ data\n    rate_flag = flagBits[6]\n    if rate_flag == '1':\n        slot_length\
      \ = round(8160e-06/(1/rx_fs))\n    else:\n        slot_length = round(20332e-06/(1/rx_fs))\n\
      \    rf_reset_length = round(8160e-06/(1/rx_fs))\n    command_time = tx_len\
      \ / tx_fs\n    command_length = round((command_time/(1/rx_fs)) + (2.5e-04/(1/rx_fs)))\n\
      \    N = 50\n    rho = 15\n\n    match flagBits[6:8]:\n        case '00':\n\
      \            SOF_time = (151.04e-06) * 4\n            SOF_low_time = (56.64e-06)\
      \ * 4\n            bit_time = (37.76e-06) * 4\n        case '01':\n        \
      \    SOF_time = (149.85e-06) * 4\n            SOF_low_time = 0\n           \
      \ bit_time = (37.46e-06) * 4\n        case '10':\n            SOF_time = 151.04e-06\n\
      \            SOF_low_time = 56.64e-06\n            bit_time = 37.76e-06\n  \
      \      case '11':\n            SOF_time = 149.85e-06\n            SOF_low_time\
      \ = 0\n            bit_time = 37.46e-06\n\n    SOF_length = round(SOF_time/(1/rx_fs))\n\
      \    SOF_low_length = round(SOF_low_time/(1/rx_fs))\n    bit_length = round(bit_time/(1/rx_fs))\n\
      \    response_bits = 8\n    response_length = SOF_length + (bit_length * (response_bits))\n\
      \    tx_start = 0\n    card_signals = [None] * response_length\n    ## Finds\
      \ when the received signal is Low\n    start = findRFreset(data)\n    data =\
      \ data[start:]\n    ## Loops through data to find all the card signals\n   \
      \ while ((tx_start+(2*command_length)) < len(abs_data)):\n        abs_data =\
      \ np.abs(data)\n        # Finds when data goes high (start of command transmission)\n\
      \        for i in range(0,len(abs_data), 100):\n            window_size = 100\n\
      \            if (i + window_size) > (len(abs_data) - 1):\n                window_size\
      \ = len(abs_data) - i - 1\n            delta = np.abs(abs_data[i+window_size]\
      \ - abs_data[i])\n            if delta > 0.1:\n                tx_start = i\n\
      \                break\n            tx_start = None\n        if (tx_start is\
      \ None):\n            return card_signals[1:]\n        \n        offset = tx_start\
      \ + (command_length - slot_length - rf_reset_length) # Finds end of command\
      \ transmission\n        # Finds the start of the card response\n        response_start\
      \ = findResponseStart(data[offset:], N , rho)\n        offset = offset + response_start\
      \ - SOF_low_length\n        \n        # Gets card signal\n        card_signal\
      \ = data[offset:offset + response_length]\n        card_signals = np.vstack((card_signals,card_signal))\n\
      \        \n        # Finds the next time transmission pauses\n        data =\
      \ data[tx_start + command_length - rf_reset_length:]\n        start = findRFreset(data)\n\
      \        data = data[start:]\n    return card_signals[1:]\n    \n#Finds when\
      \ the start of tag response starts\ndef findResponseStart(data, N, rho):\n \
      \   data = np.abs(data)\n    delta = np.abs(np.diff(data))\n    midPoint = int(np.floor(N/2)\
      \ + 1)\n    deltaSegment = delta[midPoint:N]\n    sigma = rho * np.mean(deltaSegment)\n\
      \    start = np.where(delta > sigma)[0][0]\n    return start\n\n#Finds when\
      \ data goes low for period of time\ndef findRFreset(data):\n    window_size\
      \ = 1000\n    for i in range(0, len(data), window_size):\n            avg =\
      \ np.mean(abs(data[i:i+window_size]))\n            if avg <= 0.001:\n      \
      \          return i\n\n## Uses a sliding window and mean to find how similar\
      \ two arrays are           \ndef differences(arr1, arr2):\n    windows_size\
      \ = 10\n    diffs = []\n    for i in range(0,len(arr1)-windows_size, windows_size):\n\
      \        arr1_mean = np.mean(np.abs(arr1[i:i+windows_size]))\n        arr2_mean\
      \ = np.mean(np.abs(arr2[i:i+windows_size]))\n        diff = np.abs(arr1_mean\
      \ - arr2_mean)\n        diffs = np.append(diffs, diff)\n    return np.mean(diffs)\n\
      \n## Makes the input array have the same mean as correlation signal\ndef normalize_data(self,\
      \ data):\n    data = np.asarray(data, np.complex_)\n    overall_mean_magnitude\
      \ = np.mean(np.abs(self.corr_signal))\n    row_means = np.mean(np.abs(data),\
      \ axis=1)\n    normalized_data = np.empty_like(data, dtype=np.complex_)\n  \
      \  for i in range(data.shape[0]):\n        magnitudes = np.abs(data[i])\n  \
      \      phases = np.angle(data[i])\n\n        scale_factor = overall_mean_magnitude\
      \ / row_means[i]\n\n        new_magnitudes = magnitudes * scale_factor\n\n \
      \       normalized_data[i] = new_magnitudes * np.exp(1j * phases)\n    return\
      \ normalized_data\n    \n\n"
    affinity: ''
    alias: ''
    card: card
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    rx_fs: '2000000.0'
    signals_requested: '500'
    tx_fs: '12500000.0'
  states:
    _io_cache: ('Save Card Signals', 'SaveNumpyArrayBlock', [('rx_fs', '2000000.0'),
      ('tx_fs', '12500000.0'), ('signals_requested', '100'), ('card', '1')], [('0',
      'complex', 1), ('tx_len', 'message', 1)], [('flagBits', 'message', 1)], '',
      ['card', 'rx_fs', 'signals_requested', 'tx_fs'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 80.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: rx_fs
    comment: ''
    fc: center_frequency
    fftsize: '2048'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10000'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 216.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '630596'
    srate: rx_fs
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 440.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_frequency
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: tx_fs
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 232.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 'center_frequency '
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: rx_fs
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 224.0]
    rotation: 0
    state: enabled

connections:
- [epy_block_0, '0', uhd_usrp_sink_0, '0']
- [epy_block_0, tx_len, epy_block_1, tx_len]
- [epy_block_1, flagBits, epy_block_0, flagBits]
- [uhd_usrp_source_0, '0', blocks_file_sink_0, '0']
- [uhd_usrp_source_0, '0', epy_block_1, '0']
- [uhd_usrp_source_0, '0', qtgui_sink_x_0, '0']
- [uhd_usrp_source_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
